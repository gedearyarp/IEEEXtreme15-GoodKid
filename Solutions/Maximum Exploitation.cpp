#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define fi first
#define se second
#define pb(a) push_back(a)
#define mp(a, b) make_pair(a, b)
#define el '\n'
void gedearyarp(){
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
}

bool isNotOverleap(ll a1, ll b1, ll a2, ll b2, ll x1, ll y1, ll x2, ll y2){
	if (x1 <= a2 && x1 >= a1 && y1 <= b2 && y1 >= b1 ) return false;
	if (x1 <= a2 && x1 >= a1 && y2 <= b2 && y2 >= b1 ) return false;
	if (x2 <= a2 && x2 >= a1 && y1 <= b2 && y1 >= b1 ) return false;
	if (x2 <= a2 && x2 >= a1 && y2 <= b2 && y2 >= b1 ) return false;
	if (a1 <= x2 && a1 >= x1 && b1 <= y2 && b1 >= y1 ) return false;
	if (a1 <= x2 && a1 >= x1 && b2 <= y2 && b2 >= y1 ) return false;
	if (a2 <= x2 && a2 >= x1 && b1 <= y2 && b1 >= y1 ) return false;
	if (a2 <= x2 && a2 >= x1 && b2 <= y2 && b2 >= y1 ) return false;
	if (a1 < x1 && a2 > x2 && b2>y1 && b1<y2) return false;
	if (a2 > x1 && a1 < x2 && b1<y1 && b2>y2) return false;
	return true;
}

ll cb[1005][1005], a[1005][1005];

int main() {
	//gedearyarp();
	vector < ll > val, x1, y1, x2, y2;
	ll r,c,x,y,sizee=0, ans=0; cin >> r >> c >> x >> y;
	
	if(x==0 || y==0) cout << 0 << el;
	else {
		for(ll i=1; i<=r;i++) for(ll j=1; j<=c;j++)cin >> a[i][j];
	
		for(ll i=1; i<=r;i++) cb[i][1] = a[i][1] + cb[i-1][1];
		
		for(ll i=1; i<=c;i++) cb[1][i] = a[1][i] + cb[1][i-1];
		
		for(ll i=2;i<=r;i++) for(ll j=2; j<=c;j++) cb[i][j] = cb[i][j-1] + cb[i-1][j] - cb[i-1][j-1] + a[i][j];
		
		for(ll i=1;i<=r;i++){
			for(ll j=1; j<=c;j++){
				ll cur;
				if(i-x >= 0 && j-y >= 0){
					cur = cb[i][j] - cb[i-x][j] - cb[i][j-y] + cb[i-x][j-y];
					if (cur>ans) ans = cur;
					val.pb(cur);
					x1.pb(i-x+1);
					y1.pb(j-y+1);
					x2.pb(i);
					y2.pb(j);
					sizee++;
				}
				if(i-y >= 0 && j-x >= 0){
					cur = cb[i][j] - cb[i-y][j] - cb[i][j-x] + cb[i-y][j-x];
					if (cur>ans) ans = cur;
					val.pb(cur);
					x1.pb(i-y+1);
					y1.pb(j-x+1);
					x2.pb(i);
					y2.pb(j);
					sizee++;
				}
			}
		}
		for(ll i = 0; i<val.size(); i++){
			for(ll j= i+1; j<val.size(); j++){
				if(isNotOverleap(x1[i], y1[i], x2[i], y2[i], x1[j], y1[j], x2[j], y2[j]) && isNotOverleap( x1[j], y1[j], x2[j], y2[j], x1[i], y1[i], x2[i], y2[i])){
					ll now = val[i] + val[j];
					if (now > ans){
						ans = now;
					}
				}
			}
		}
		cout << ans << el;
	}
}
/*
5 5
3 2
8 5 1 0 4
10 3 4 1 6
4 8 0 0 4
6 4 8 9 3
2 7 5 2 2
*/